import dotenv from "dotenv";
dotenv.config();
import nodemailer from "nodemailer";
import rateLimit from "express-rate-limit";
import express from "express";
import cors from "cors";
import mongoose from "mongoose";
import multer from "multer";
import fs from "fs";

const app = express();
app.use(express.json());
app.set("trust proxy", 1); // B·∫≠t ch·∫ø ƒë·ªô trust proxy
app.use(
  cors({
    origin: "*",
    methods: "GET,POST",
  })
);

// C·∫•u h√¨nh file tƒ©nh
// app.use("/static", express.static(path.join(__dirname, "static")));

// K·∫øt n·ªëi MongoDB
const dbUri = process.env.MONGO_URI;
mongoose
  .connect(dbUri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("K·∫øt n·ªëi MongoDB th√†nh c√¥ng"))
  .catch((err) => console.error("L·ªói k·∫øt n·ªëi MongoDB:", err));

// ƒê·ªãnh nghƒ©a schema cho ·∫£nh
const ImageSchema = new mongoose.Schema({
  filename: String,
  originalname: String,
  path: String,
imageUrl:String,
  createdAt: { type: Date, default: Date.now },
});

const Image = mongoose.model("Image", ImageSchema);

// C·∫•u h√¨nh l∆∞u tr·ªØ v·ªõi multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const tmpDir = "/tmp";
    if (!fs.existsSync(tmpDir)) {
      fs.mkdirSync(tmpDir);
    }
    cb(null, tmpDir); // S·ª≠ d·ª•ng th∆∞ m·ª•c t·∫°m th·ªùi c·ªßa Vercel
  },
  filename: (req, file, cb) => {
    const timestamp = Date.now();
    cb(null, `${timestamp}-${file.originalname}`);
  },
});

const upload = multer({ storage });

// Email Config t·ª´ .env
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD,
  },
});

// Ki·ªÉm so√°t l∆∞u l∆∞·ª£ng (rate limit)
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 ph√∫t
  max: 50, // T·ªëi ƒëa 5 y√™u c·∫ßu trong 1 ph√∫t
  message: "Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau.",
});
app.use(limiter);

// G·ª≠i th√¥ng b√°o (email v√† l∆∞u ·∫£nh)
app.post("/notify", upload.single("image"), async (req, res) => {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }
  try {
    // L∆∞u ·∫£nh v√†o MongoDB
    let imageUrl = null;
    if (req.file) {
      const newImage = new Image({
        filename: req.file.filename,
        originalname: req.file.originalname,
        path: req.file.path,
        imageUrl:""
      });
      await newImage.save();
      imageUrl = `${req.protocol}://${req.get("host")}/images/${newImage._id}`;
      // newImage.imageUrl=imageUrl
      await Image.findByIdAndUpdate(newImage._id, { imageUrl });
    }

    // G·ª≠i email
    const mailOptions = {
      from: `"Camera ch·ªëng tr·ªôm"`, // T√™n h·ªá th·ªëng
      to: process.env.EMAIL_TO,
      subject: "üö® C·∫£nh b√°o: C√≥ ng∆∞·ªùi ƒë·ªôt nh·∫≠p üö®",
      html: `
        <div style="font-family: Arial, sans-serif; color: #333;">
          <div style="text-align: center; padding: 20px; background-color: #ff4d4d; color: white; border-radius: 8px;">
            <h1 style="margin: 0;">üö® C·∫£nh B√°o An Ninh üö®</h1>
          </div>
          <div style="padding: 20px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9;">
            <p><strong>Th√¥ng b√°o:</strong> Ph√°t hi·ªán c√≥ ng∆∞·ªùi ƒë·ªôt nh·∫≠p!</p>
            <p><strong>Th·ªùi gian:</strong> ${new Date().toLocaleString()}</p>
            <p><strong>Kho·∫£ng c√°ch ph√°t hi·ªán:</strong> ${req.body?.distance || "Kh√¥ng x√°c ƒë·ªãnh"} cm</p>
            <hr>
            <p style="margin: 0; text-align: center;">
              <img src="cid:alert-logo" alt="Alert Logo" style="width: 150px; margin: 20px 0;">
            </p>
            ${
              imageUrl
                ? `<p style="text-align: center; margin: 20px 0;">
                    <img src="cid:capture-image" alt="Capture Image" style="width: 100%; max-width: 500px; border-radius: 8px;">
                  </p>`
                : "<p style='text-align: center; color: #999;'>Kh√¥ng c√≥ ·∫£nh ch·ª•p k√®m theo</p>"
            }
            <div style="text-align: center; margin-top: 20px;">
              <p style="background-color: #ff4d4d; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Xem Chi Ti·∫øt</p>
            </div>
          </div>
          <footer style="margin-top: 20px; text-align: center; color: #aaa; font-size: 12px;">
            <p>H·ªá th·ªëng an ninh th√¥ng minh - Camera Security System</p>
            <p>¬© 2025 - T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
          </footer>
        </div>
      `,
      attachments: [
        {
          // filename: logoAlert,
          // path: logoPath, // ƒê∆∞·ªùng d·∫´n t·ªõi ·∫£nh logo tr√™n server
          cid: "alert-logo", // ID c·ªßa ·∫£nh trong HTML
        },
        ...(imageUrl
          ? [
              {
                filename: req.file.originalname,
                path: req.file.path,
                cid: "capture-image", // ID c·ªßa ·∫£nh ch·ª•p trong HTML
              },
            ]
          : []),
      ],
    };

    await transporter.sendMail(mailOptions);
    console.log("Email v√† ·∫£nh ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
    res.json({ success: true, message: "Notification sent and image uploaded" });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ success: false, error: "Failed to send notification" });
  }
});

// API l·∫•y to√†n b·ªô ·∫£nh
app.get("/images", async (req, res) => {
  try {
    const images = await Image.find({});
    res.json(images);
  } catch (error) {
    console.error("Error fetching images:", error);
    res.status(500).json({ success: false, error: "Failed to fetch images" });
  }
});
app.delete("/images/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const image = await Image.findByIdAndDelete(id);
    if (!image) {
      return res.status(404).json({ success: false, error: "Image not found" });
    }

    res.json({ success: true, message: "Image deleted successfully", image });
  } catch (error) {
    console.error("Error deleting image:", error);
    res.status(500).json({ success: false, error: "Failed to delete image" });
  }
});

// Trang ch√≠nh
app.get("/", (req, res) => {
  res.send("Server is running");
});

// L·∫Øng nghe server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`http://localhost:${PORT}`);
});
